
//数据结构
//穿透节点，及穿透节点绑定主机
var data = {
    interNodes: [
        {
            area: "北京1",
            ip: "192.168.45.1",
            users: [
                "192.168.45.110",
                "192.168.45.112",
                "192.168.45.113",
                "192.168.45.114",
            ]
        },
        {
            area: "北京2",
            ip: "192.168.45.2",
            users: [
                "192.168.45.120",
                "192.168.45.122",
                "192.168.45.123",
                "192.168.45.124",
            ]
        },
        {
            area: "西安",
            ip: "192.168.60.1",
            users: [
                "192.168.60.110",
                "192.168.60.112",
                "192.168.60.113",
                "192.168.60.114",
            ]
        },
        {
            area: "武汉",
            ip: "192.168.40.1",
            users: [
                "192.168.40.110",
                "192.168.40.112",
                "192.168.40.113",
                "192.168.40.114",
            ]
        },
        {
            area: "长沙",
            ip: "192.168.42.1",
            users: [
                "192.168.42.110",
                "192.168.42.112",
                "192.168.42.113",
                "192.168.42.114",
            ]
        },
    ],
}

//数据同步节点
var sygnNodeType = [
    {
        area: "穿透节点",
        desc: "用于将无公网地址的终端建立公网端口映射"
    },
    {
        area: "服务端",
        desc: "用于提供公网端口映射服务"
    },
    {
        area: "客户端",
        desc: "用于将申请本机ip相关的3389端口映射服务"
    },
]

//数据同步
var dataInit = [
    {
        desc: "interNodes条目初始同步",
        subMutation: [
            {
                desc: "interNodes条目初始同步",
                sources: [
                    {
                        desc: "服务启动操作",
                        requestSource: "服务端"
                    },
                    {
                        desc: "客户端请求数据",
                        requestSource: "客户端"
                    }
                ]
            }
        ]
    }
]
var dataMutation = [
    {
        desc: "interNodes条目初始同步和渐进同步",
        subMutation: [
            {
                desc: "interNodes条目新增(渐进同步)",
                sources: [
                    {
                        desc: "手动添加为中转节点",
                        requestSource: "服务端手动"
                    },
                    {
                        desc: "使用http请求来自动添加中转节点",
                        requestSource: "服务端"
                    }
                ]
            }
        ]
    },
    {
        desc: "users子条目初始同步和渐进同步",
        subMutation: [
            {
                desc: "users子条目新增(渐进同步)",
                sources: [
                    {
                        desc: "手动添加为中转节点"
                    },
                    {
                        desc: "使用http请求来自动添加远程连接服务节点"
                    }
                ]
            },
            {
                desc: "暂时忽略删和改查支持"
            }
        ]
    },
]

//界面数据版本状态
//各端数据同步使用数据同步器，同步器是一个数据git内置的数据logic，需要实现数据占用协商，权限释放等所有logic数据处理功能
var userInterface = {
    dataBridge: {
        dataSnipaste: data, //描述数据当前状态
        dataGit: {
            //描述数据突变历史
        },
        dataRuntime: {
            //描述运行时数据与逻辑的关系
        }
    },
    visionAbout: {
        mutationWorkerLogics: [
            //描述对用户交互进行处理的工作者逻辑
            //服务端授权给客户端一个visionPathKey，这个Key可以给客户端对于某个数据path的权限
            //而Key 属性分为查增删改四个小类，组合有C(4, 1)，C(4, 2)，C(4, 3)，C(4, 4)这么多种
            //貌似客户端可以使用这个Key对某个数据进行任意操作，例如对[]结构进行新增操作，对{}结构进行新增操作等
            //但是这里的任意操作只能修改客户端的dataGit，在客户端提交同步请求后，会将git变动全部提交到服务器，
            //服务器会检查Key和dataGit是否符合规则，然后再触发服务端的数据突变逻辑处理
            {
                desc: "选中下拉列表某一项",
                commit: "例如选中 北京1",
            },
            {
                desc: "选中确认本机ip选择框"
            },
            {
                desc: "申请获取远程协助地址（ip+port）"
            }
        ],
    },

}
